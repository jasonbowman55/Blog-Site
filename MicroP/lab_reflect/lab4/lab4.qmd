---
title: "Digital Audio"
description: "Lab 4"
author: "Jason Bowman"
date: "10-17-24"
categories:
  - Reflection
  - Lab Report
draft: false
code-links:
  - icon: github
---
# Intro & Design Approach
This lab utilized an SM231508-1 8ohm speaker, and a STM32 Nucleo-32 board with an on board STM32L432KC MCU in order to play a the song "FÃ¼r Elise". This was done using memory mapped I/O, and accessing specific memory addresses and peripherals in order to initialize and run the code on the MCU.

**PICTURE OF THE FINISHED HARDWARE**

# Design
*This section goes into the hardware and software design specifics*

## Hardware
A simple audio amplifier (LM386) chip was used to drive an 8-ohm speaker. The amplifier was powered by a 5V supply, and the input signal was a 3.3V PWM signal (0-3.3V). Standard resistors and capacitors, as recommended in the datasheet for PWM audio driving, were utilized to produce cleaner sound output. A potentiometer was also included in the circuit to function as a volume control interface.

## File Structure
"All files used in the project, including the specifically generated Segger project files, are stored in the same local directory. Within the Segger project, the file structure is organized as shown in Figure 2. Green lines indicate #include directives in the main.c file, while the black arrows show the correlation between header files and their respective .c files.
![Figure2: Segger project file mapping](images/file_map.jpeg)

## High Level Software description
The Multi-Speed Internal (MSI) clock was used in tandem with a PLL configuration to achieve the desired system clock (SYSCLK) speed of 4 MHz. The SYSCLK was then routed to the GPIOA and TIM16 peripherals. The TIM16 built-in timer was used both as a delay timer and for PWM generation to drive the speaker. TIM16 has internal registers, the Auto-Reload Register (ARR) and prescaler (PSC), which were the main parameters used to set the output frequency and note duration, in conjunction with a counter variable.

## Clock Configuration (I NEED TO FIX VALUES)
As mentioned, the MSI onboard clock was used as an input to the PLL configuration, which allows for precise SYSCLK speed control. The PLL uses two divisors (M and R) and one multiplier (N), as shown in Figure 3, to achieve this function. With the MSI frequency configured to 1 MHz and setting M=1, N=4, and R=1, we can achieve the desired SYSCLK speed of 4 MHz.

![](images/clk_tree_full.jpeg)
![Figure3: Full MCU clk tree & PLL module](images/clk_tree_pll.jpeg)


## TIM16 Configuration
**This will include math and the structure of TIM16 and how we chose what to set what registers in order to get our outputs. As well as how the software relates to this**

## Frequency & Duration Calculations
**This will include the calculations that shows how accurate the frequencies and delays that we calculated using the TIM16**

## Debugging

## Video of Both Songs
