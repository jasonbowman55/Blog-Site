---
title: "Lab 1 Reflection"
description: "My takeaways"
author: "Jason Bowman"
date: "9/9/2024"
categories:
  - Reflection
  - Lab Report
draft: false
---
In Lab 1, I was tasked with fully assembling the E155 protoboard and verifying the functionality of both the MCU and FPGA.

To confirm the MCU was operational, I ran sample code from the E155 website using ARM Segger. For the FPGA, I used a new software tool called Lattice Radiant, which is designed for hardware synthesis. Lattice Radiant allows for System Verilog programming and provides tools for manually assigning pinouts on the chip. We employed this software to control a 7-segment display and some onboard LEDs. I found learning Lattice Radiant particularly enjoyable, as it helped me reconnect with System Verilog concepts I had previously forgotten from E85.

This course has been significantly beneficial both professionally and technically. Professionally, I’ve gained valuable experience with Git and GitHub, which are crucial tools for this class and will be beneficial in my future career. Additionally, I’ve reinforced important lessons about the importance of preparation and managing my time effectively. For instance, after a late night working on Micro Ps, I realized the importance of setting aside work to rest and return more refreshed the next day.

Going forward, I will be more meticulous about reviewing and commenting my code. My initial Verilog code was poorly commented, which led to confusion within the submodules. This lab has taught me valuable code management techniques that I will apply from the outset in Lab 2.

## Technical Takeaways

### What to Remember
- Ensure that when assigning bits, they are prefaced by their respective size and base specifications.
- If you encounter issues, double-check that the hardware is functioning as expected to rule out potential malfunctions.

### For the Future
- How to create and use a test bench.