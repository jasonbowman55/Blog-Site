---
title: "Lab 2 Reflection"
description: "My takeaways"
author: "Jason Bowman"
date: "9/9/2024"
categories:
  - Reflection
  - Lab Report
draft: false
---
## Intro & Design Approach
In this lab, a design was implemented on an FPGA to time-multiplex between two 7-segment displays, each showing separate values based on its own 4-bit binary input. Two simple transistor circuits were used to alternate between the respective 7-segment displays. Additionally, the design required the sum of these two 4-bit inputs to be displayed in binary on a 5-bit line of LEDs.

My design approach began with a block diagram, where I created a top module and two submodules: one controlled both 7-segment displays, and the other controlled the line of 5 independent LEDs.

In SystemVerilog, when programming the UPduino FPGA, a counter was used in conjunction with the on-board high-speed oscillator (HSOSC) to generate an internal clock signal named int_osc. This int_osc signal was then used to alternate between the displays and manage other internal logic. Combinational logic was subsequently implemented to handle the 7-segment display outputs. The oscillatory behavior of the int_osc signal was used to toggle the I/Os for each independent 7-segment display. A simple assign statement was used to generate the LED binary outputs.

### Blcok Diagram
![This block diagram outlines the SystemVerilog modules used in lab 2](../images/lab2_block_diagram.jpeg)

### Circuit Schematic
![This circuit schematic shows the hardware connections, related pins, and corresponding SystemVerilog signals](../images/lab2_circuit_diagram.jpeg)

## Results & Discussion
This lab resulted in a working time-multiplexed dual 7-segment display that coorectly displays hexidecimal digits 1-F independantly, clearly, and without bleeding.

Using a selector in the counter variable provides adequate oscillation control for this application. To optimize and improve accuracy, developing a more precise counter variable may be beneficial for future work.

Issues persist with the LED binary output, as it is not displaying the correct summed values. Research has confirmed that the logic is implemented correctly and hardware has been manually checked. Next steps include viewing the waveforms generated by the SystemVerilog code using ModelSim to identify potential HDL issues or to further investigate hardware if the HDL is ruled out.

This lab took approximately 13 hours to complete. Significant challenges were encountered early in the implementation stage, and using test benches could have helped reduce the time spent.

## For The future
- Learn and implament test benches in order to miniimize time wasted
- Create a more clear and concise circuit schematic that is easier to follow when building the circuit.